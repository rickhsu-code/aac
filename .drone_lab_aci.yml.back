---
kind: pipeline
type: kubernetes
name: Deploy

concurrency:
  limit: 1

environment: 
  BOOTSTRAP: 'false'
  # APIC NAE Pre-Change Analysis
  APIC_NAE_PCA: 'false'
  # APIC Deploy Stages
  APIC_SNAPSHOT: 'true'
  APIC_DEPLOY: 'true'
  FULL_APIC_DEPLOY: 'false' # If true always deploy everything (no diff)
  # APIC Test Stages
  TEST_APIC_DEPLOY: 'true'
  FULL_APIC_TEST: 'true' # If true always test everything (no diff)

  PY_COLORS: '1'
  ANSIBLE_FORCE_COLOR: '1'

trigger:
  event:
    exclude:
      - tag

clone:
  disable: true

steps:
  - name: Clone Repo
    image: drone/git
    environment:
      GIT_SSL_NO_VERIFY: 'true'
    pull: if-not-exists

  - name: Setup
    image: danischm/aac:0.3.1
    environment:
      GIT_SSL_NO_VERIFY: 'true'
    commands:
      - export ANSIBLE_CONFIG=$(pwd)/ansible.cfg
      - ansible-galaxy install -r requirements.yml
      - mkdir previous
      - git clone --depth 1 --branch last_deploy https://CONTROLLER_IP/aci-iac/aac-inventory.git previous/
    depends_on:
      - Clone Repo

  - name: Validate
    image: danischm/aac:0.3.1
    environment:
      ANSIBLE_VAULT_PASSWORD:
        from_secret: ANSIBLE_VAULT_PASSWORD
    commands:
      - export ANSIBLE_CONFIG=$(pwd)/ansible.cfg
      - set -o pipefail
      - ansible-playbook -i data/lab/hosts.yaml apic_validate.yaml |& tee validate_output.txt
    depends_on:
      - Setup 

  - name: Bootstrap
    image: danischm/aac:0.3.1
    pull: never
    environment:
      ANSIBLE_VAULT_PASSWORD:
        from_secret: ANSIBLE_VAULT_PASSWORD
    commands:
      - >
        if [ "$BOOTSTRAP" == "true" ]; then
          export ANSIBLE_CONFIG=$(pwd)/ansible.cfg
          set -o pipefail
          ansible-playbook -i data/lab/hosts.yaml apic_bootstrap.yaml |& tee bootstrap_output.txt
        fi
    when:
      status: [failure]
      branch:
        - master
    depends_on:
      - Validate

  - name: Test Bootstrap
    image: danischm/aac:0.3.1
    pull: never
    environment:
      ANSIBLE_VAULT_PASSWORD:
        from_secret: ANSIBLE_VAULT_PASSWORD
    commands:
      - >
        if [ "$BOOTSTRAP" == "true" ]; then
          export ANSIBLE_CONFIG=$(pwd)/ansible.cfg
          set -o pipefail
          ansible-playbook -i data/lab/hosts.yaml test_apic_bootstrap.yaml |& tee test_apic_bootstrap_output.txt
        fi   
    depends_on:
      - Bootstrap
    when:
      branch:
        - master


  - name: Render APIC
    image: danischm/aac:0.3.1
    environment:
      GIT_SSL_NO_VERIFY: 'true'
      ANSIBLE_VAULT_PASSWORD:
        from_secret: ANSIBLE_VAULT_PASSWORD
    commands:
      - git clone https://CONTROLLER_IP/aci-iac/aac-inventory-config.git
      - export ANSIBLE_CONFIG=$(pwd)/ansible.cfg
      - 'echo "previous_inventory: ''./previous/data/lab/''" >> apic_render_vars.yaml'
      - >
        if [ "$FULL_APIC_DEPLOY" == "true" ]; then
          echo "apic_mode: 'all'" >> apic_render_vars.yaml
        fi
      - set -o pipefail
      - ansible-playbook -i data/lab/hosts.yaml -e @apic_render_vars.yaml apic_render.yaml |& tee render_output.txt
      - >
        if [ -d "./rendered" ]; then
          /bin/cp -rf ./rendered/ ./aac-inventory-config/
        fi
    depends_on:
      - Test Bootstrap
      - Validate
    when:
      branch:
        - master

  - name: Deploy APIC
    image: danischm/aac:0.3.1
    environment:
      ANSIBLE_VAULT_PASSWORD:
        from_secret: ANSIBLE_VAULT_PASSWORD
    commands:
      - export ANSIBLE_CONFIG=$(pwd)/ansible.cfg
      - 'echo "apic_snapshot: $APIC_SNAPSHOT" >> apic_deploy_vars.yaml'
      - 'echo "apic_deploy: $APIC_DEPLOY" >> apic_deploy_vars.yaml'
      - 'echo "previous_inventory: ''./previous/data/lab/''" >> apic_deploy_vars.yaml'
      - >
        if [ "$FULL_APIC_DEPLOY" == "true" ]; then
          echo "apic_mode: 'all'" >> apic_deploy_vars.yaml
        fi
      - set -o pipefail
      - ansible-playbook -i data/lab/hosts.yaml -e @apic_deploy_vars.yaml apic_deploy.yaml |& tee deploy_output.txt
    when:
      branch:
        - master
      event:
        - push
    depends_on:
      - Render APIC

  - name: Test APIC
    image: danischm/aac:0.3.1
    environment:
      ANSIBLE_VAULT_PASSWORD:
        from_secret: ANSIBLE_VAULT_PASSWORD
    commands:
      - export ANSIBLE_CONFIG=$(pwd)/ansible.cfg
      - 'echo "test_apic_deploy: $TEST_APIC_DEPLOY" >> apic_test_vars.yaml'
      - 'echo "previous_inventory: ''./previous/data/lab/''" >> apic_test_vars.yaml'
      - >
        if [ "$FULL_APIC_TEST" == "true" ]; then
          echo "apic_mode: 'all'" >> apic_test_vars.yaml
        fi
      - set -o pipefail
      - ansible-playbook -i data/lab/hosts.yaml -e @apic_test_vars.yaml apic_test.yaml |& tee test_output.txt
    when:
      branch:
        - master
      event:
        - push
    depends_on:
      - Deploy APIC

  - name: GIT Config Update
    image: danischm/aac:0.3.1
    environment:
      GIT_SSL_NO_VERIFY: 'true'
      GITHUB_TOKEN:
        from_secret: GITHUB_TOKEN
    commands:
      - cd aac-inventory-config
      - git config credential.helper "store --file=.git/credentials"
      - echo "https://GIT_TOKEN:$GITHUB_TOKEN@CONTROLLER_IP" > .git/credentials
      - git config user.email "$$DRONE_COMMIT_AUTHOR_EMAIL"
      - git config user.name "$$DRONE_COMMIT_AUTHOR"
      - git add -A
      - git commit -a -m "$$DRONE_COMMIT_MESSAGE" --allow-empty
      - git push
    when:
      branch:
        - master
      event:
        - push
    depends_on:
      - Deploy APIC

  - name: GIT Tag Release
    image: danischm/aac:0.3.1
    environment:
      GIT_SSL_NO_VERIFY: 'true'
      GITHUB_TOKEN:
        from_secret: GITHUB_TOKEN
    commands:
      - git config credential.helper "store --file=.git/credentials"
      - echo "https://GIT_TOKEN:$GITHUB_TOKEN@CONTROLLER_IP" > .git/credentials
      - git push --delete origin last_deploy
      - git tag last_deploy
      - git push --tags
    when:
      branch:
        - master
      event:
        - push
    depends_on:
      - GIT Config Update
      - Test APIC

  - name: Upload Artifacts
    image: jmccann/drone-artifactory:3.3
    settings:
      username: as-deployer
      password:
        from_secret: ARTIFACTORY_PASSWORD
      url: https://engci-maven.cisco.com/artifactory
      actions:
        - action: upload
          path: AS-release/Community/wauterw/aac-lab/${DRONE_BUILD_NUMBER}/
          flat: false
          sources:
            - test_results/lab/apic1/*.*
    when:
      status: [changed, failure, success]
      branch:
        - master
      event:
        - push
    depends_on:
      - GIT Config Update
      - Test APIC

  - name: Prepare Notify
    image: danischm/aac:0.3.1
    commands:
      - python3 .ci/render-wx.py
    when:
      status: [changed, failure, success]
    depends_on:
      - GIT Tag Release
      - Upload Artifacts

  - name: Notify
    image: ciscosso/drone-webex-team:v0.0.1
    settings:
      pull: true
      room: 'AAC Lab Notifications'
      room_id: 'Y2lzY29zcGFyazovL3VzL1JPT00vMDQ4NjIxZjAtYTZiYS0xMWVjLWIyMTctZGIxYmM5ZjJmZTQ3'
      access_token:
        from_secret: SPARK_ACCESS_TOKEN
      body: file:///drone/src/webex.txt
    when:
      status: [changed, failure, success]
    depends_on:
      - Prepare Notify
